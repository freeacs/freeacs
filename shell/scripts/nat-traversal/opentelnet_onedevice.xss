# Terminology:
# 	gateway : the device in front, we want to open a virtual server on this device going into the device behind
# 	target  : the device behind the gateway, the device we want to reach with our virtual server

# Store the unit-id under investigation in an easy-to-read variable
var gateway_unit '${_1}'
var TARGET_PORT (${_2}).toFixed(0)
var GATEWAY_PORT (${_3}).toFixed(0)
var DESCRIPTION '${_4}'
var PROTOCOL '${_5}'

# Change context to the unit under investigation
cc un:${gateway_unit}

# Extract IP from ConnectionRequestURL, using another script
call scripts/nat-traversal/get_connection_url_ip.xss
     
# A call always store the result in the variable ${_return}, store the ip found in the script
var gateway_ip '${_return}'

# We need to see if any device is behind this unit - use System.X_FREEACS-COM.Device.PublicIPAddress
if '${System.X_FREEACS-COM.Device.PublicIPAddress}' eq '${gateway_ip}'
	# echo ${gateway_unit} (${gateway_ip}) is a gateway device (on public IP), will now search for target devices (behind gateway)
	# find all units referring to the same gateway_ip (any unit-parameter value that matches)
	/listunits ${gateway_ip} > unitsbehind_gateway.u
	# loop through all units
	while unitsbehind_gateway.u 
		if '${1}' eq '${gateway_unit}'
			# echo Found ${1} to be referring to ${gateway_unit}, but it is the same unit - do not process 
			continue
		else 
			# echo Found ${1} to be referring to ${gateway_unit}, continue processing
			# change context to this target unit
			/unit ${1}
			call scripts/nat-traversal/get_connection_url_ip.xss
			var target_ip '${_return}'
			if '${target_ip}' eq 'NULL' or '${target_ip}' eq '' or '${System.X_FREEACS-COM.Device.PublicIPAddress}' ne '${gateway_ip}'
				# echo Could not find a target ip or the target's public ip did not match gateway ip, jump to top of while loop
				continue
			fi
			echo Open virtual server from ${gateway_unit} on ${gateway_ip} into ${1} on ${target_ip}
			/unit ${gateway_unit}
			var index 0
			while true
				var index (${index} + 1).toFixed(0)
				var vs_ip_pname 'InternetGatewayDevice.WANDevice.1.WANConnectionDevice.1.WANIPConnection.1.PortMapping.${index}.InternalClient'
				var vs_port_pname 'InternetGatewayDevice.WANDevice.1.WANConnectionDevice.1.WANIPConnection.1.PortMapping.${index}.InternalPort'
				if '${vs_ip_pname}' eq 'NULL'
					break
				else if '${vs_ip_pname}' eq '${target_ip}' && '${vs_port_pname}' eq '${TARGET_PORT}'  
					break
				fi
			done
			# The loop breaks off when there are no more virutal servers definitions found or
			# if a rule pointing to the specific target device and target port is found. We will then have
			# the correct index for the parameter.
			echo Will now create a Virtual Server rule using index ${index}
			# Skip the rest, our devices does not supprt this
			continue
			
			
			cc ut:${_ut}
			var PARAM_ROOT 'InternetGatewayDevice.WANDevice.1.WANConnectionDevice.1.WANIPConnection.1.PortMapping.${index}'
			if '${PARAM_ROOT}.ExternalPort' ne 'RW'
				echo Will add unit type parameter ${PARAM_ROOT}.ExternalPort with flag RW to unittype ${_ut}
				setparam ${PARAM_ROOT}.ExternalPort RW
			fi
			if '${PARAM_ROOT}.InternalClient' ne 'RW'
				echo Will add unit type parameter ${PARAM_ROOT}.InternalClient with flag RW to unittype ${_ut}
				setparam ${PARAM_ROOT}.InternalClient RW
			fi
			if '${PARAM_ROOT}.InternalPort' ne 'RW'
				echo Will add unit type parameter ${PARAM_ROOT}.InternalPort with flag RW to unittype ${_ut}
				setparam ${PARAM_ROOT}.InternalPort RW
			fi
			if '${PARAM_ROOT}.PortMappingDescription' ne 'RW'
				echo Will add unit type parameter ${PARAM_ROOT}.PortMappingDescription with flag RW to unittype ${_ut}
				setparam ${PARAM_ROOT}.PortMappingDescription RW
			fi
			if '${PARAM_ROOT}.PortMappingEnabled' ne 'RW'
				echo Will add unit type parameter ${PARAM_ROOT}.PortMappingEnabled with flag RW to unittype ${_ut}
				setparam ${PARAM_ROOT}.PortMappingEnabled RW
			fi
			if '${PARAM_ROOT}.PortMappingLeaseDuration' ne 'RW'
				echo Will add unit type parameter ${PARAM_ROOT}.PortMappingLeaseDuration with flag RW to unittype ${_ut}
				setparam ${PARAM_ROOT}.PortMappingLeaseDuration RW
			fi
			if '${PARAM_ROOT}.PortMappingProtocol' ne 'RW'
				echo Will add unit type parameter ${PARAM_ROOT}.PortMappingProtocol with flag RW to unittype ${_ut}
				setparam ${PARAM_ROOT}.PortMappingProtocol RW
			fi
			
			unit ${gateway_unit}
			echo on
			setparam InternetGatewayDevice.WANDevice.1.WANConnectionDevice.1.WANIPConnection.1.PortMapping.${index}.ExternalPort             ${GATEWAY_PORT}
			setparam InternetGatewayDevice.WANDevice.1.WANConnectionDevice.1.WANIPConnection.1.PortMapping.${index}.InternalClient           ${target_ip}
			setparam InternetGatewayDevice.WANDevice.1.WANConnectionDevice.1.WANIPConnection.1.PortMapping.${index}.InternalPort             ${TARGET_PORT}
			setparam InternetGatewayDevice.WANDevice.1.WANConnectionDevice.1.WANIPConnection.1.PortMapping.${index}.PortMappingDescription   ${DESCRIPTION}
			setparam InternetGatewayDevice.WANDevice.1.WANConnectionDevice.1.WANIPConnection.1.PortMapping.${index}.PortMappingEnabled       1
			setparam InternetGatewayDevice.WANDevice.1.WANConnectionDevice.1.WANIPConnection.1.PortMapping.${index}.PortMappingLeaseDuration 0
			setparam InternetGatewayDevice.WANDevice.1.WANConnectionDevice.1.WANIPConnection.1.PortMapping.${index}.PortMappingProtocol      ${PROTOCOL}
			echo Parameters set, will kick device to execute changes immediately
			kick
			echo off
		fi
	done
fi

