server.servlet.context-path=/
server.port=8088

xaps.datasource.jdbcUrl=jdbc:h2:mem:testdb;MODE=MYSQL;INIT=RUNSCRIPT FROM 'classpath:schema.sql'
xaps.datasource.driverClassName=org.h2.Driver
xaps.datasource.username=sa
xaps.datasource.password=
xaps.datasource.maximum-pool-size=20

syslog.datasource.jdbcUrl=jdbc:h2:mem:testdb;MODE=MYSQL;INIT=RUNSCRIPT FROM 'classpath:schema.sql'
syslog.datasource.driverClassName=org.h2.Driver
syslog.datasource.username=sa
syslog.datasource.password=
syslog.datasource.maximum-pool-size=20

# *** xAPS Simple Provisioning Protocol Server (xAPS SPP) configuration file ***

# --- Parsing of vital information ---
# The request from a device usually contains vital and important information. You can configure
# how to parse & find this information - even though the device has never been provisioned
# by xAPS before. Currently xAPS will search for 4 types of information:
# 
# - serialnumber (a must for provisioning)
# - mac (a must for syslog)
# - softwareversion (a must for firmware upgrade)
# - modelname (a must for provisioning & discovery mode)
# 
# Depending upon the request-protocol, we can search for information in various places:
#
# 1. In the request-filename - many devices are able to request a URL which contains a mac or serialnumber
# 2. In the request-headers - many devices provide information in the header (only HTTP)
# 3. In the request-parameters - many devices provide information in the request-parameters (only HTTP)
#
# To specify a search, create a property name and a pattern to search for. 
# The property name is created like this (BNF-notation):
#
# propertyname = paramname.requestinfo
# paramname = mac | serialnumber | softwareversion | modelname
# requestinfo = requ | reqh | reqp
# requ = reqfile.index
# reqh = reqheader.header.index
# reqp = reqparam.param.index
# header = A request header name
# param = A request parameter name
# index = A unique index, made to separate two otherwise identical property names
# 
# Another way of explaining the format is the reqexp-like syntax:
#
# mac|serialnumber|softwareversion|modelname.req(file|header.<header-name>|param.<param-name>).<index>
#
# The pattern to search for is a regexp-pattern. Remember to enclose the information your'e after 
# in parenthesis (only one set of parenthesis in the pattern).
#
# Some examples which have been tested with SPA2102 (Linksys ATA) over HTTP 
# mac.reqfile.1 = ([0-9a-fA-F:]+).cfg
# serialnumber.reqheader.user-agent.1 = \((\w+)\)
# softwareversion.reqheader.user-agent.1 = (\d+\.\d+\.\d+)
# modelname.reqheader.user-agent.1 = /(\w+-[^-]+)
#
# Some examples which have been tested with SPA2102 (Linksys ATA) over TFTP
# (filename example: /FM500JA31360/000E08172240/SPA-2102/5.2.10)
# serialnumber.reqfile.1 =    /([^/]+)/[^/]+/[^/]+/[^/]+^
# mac.reqfile.1 =             /[^/]+/([^/]+)/[^/]+/[^/]+^
# modelname.reqfile.1 =       /[^/]+/[^/]+/([^/]+)/[^/]+^
# softwareversion.reqfile.1 = /[^/]+/[^/]+/[^/]+/([^/]+)^
 
# You may specify as many patterns as you like, the server will try to match until it
# finds a hit for that particular information. Read the fusion-spp.log (in debug-mode) carefully,
# it will print all headers/parameters and the filename (url), to help you find what you're searching for.   

serialnumber.reqfile.1 =    /([^/]+)/[^/]+/[^/]+/[^/]+$
mac.reqfile.1 =             /[^/]+/([^/]+)/[^/]+/[^/]+$
modelname.reqfile.1 =       /[^/]+/[^/]+/([^/]+)/[^/]+$
softwareversion.reqfile.1 = /[^/]+/[^/]+/[^/]+/([^/]+)$

mac.reqfile.2 = ([0-9a-fA-F:]+).cfg
serialnumber.reqheader.user-agent.2 = \\((\\w+)\\)
softwareversion.reqheader.user-agent.2 = (\\d+\\.\\d+\\.\\d+)
modelname.reqheader.user-agent.2 = /(\\w+-[^-]+)

# --- Provisioning output ----
# Each device may have it's own way of printing the provisioning data and we
# link a class responsible for producing the output to each modelname.
# Specify like this:
# <modelname>.output = <classname>
# The classes are described below
# Default class is SPA2102

# classname: SPA2102
# xAPS is currently tested with one device, the SPA2102 (a standard Linksys ATA adapter)
# According to documentation for this device, the SPA2102 uses the same protocol
# for provisioning as all the Sipura (SPA/Cisco/Linksys) products, so you may try
# this also for other SPA products that 2102.

SPA-2102.output = SPA
NPA201E.output = Pingcom

# -- Software upgrade output --
# A software upgrade is usually performed by returning a software-download-url 
# to the client (CPE), and then allow the client to connect to this URL and 
# download the binaries. For some clients this process is too cumbersome, and 
# we want to allow a direct response in terms of binaries with no extra round-
# trips. In order to set up this, you need to specify a software upgrade job 
# like usual. Like the property above, we use the modelname to the specify 
# which type of upgrade output you prefer. Format:
# <modelname>.upgrade-output = Regular|Staging
# Regular is the normal behaviour, while Staging will give you a binaries directly 
# if a software upgrade process.
HA01.upgrade-output = Staging 


# --- Various controls ---

# Discovery will automatically create the unit in xAPS database. No parameters will be created;
# we have no information about the device upon contact. The device will be placed in the Default profile
# in the unittype corresponding to the modelname (if such can be found). Remember to specify a
# modelname pattern above. Discovery can be true or false. Default is false.
discovery = false
 
# concurrent download limit will limit the number of concurrent downloads allowed 
# from this provisioning server. This is done to conserve bandwidth. This will 
# override jobs/servicewindows if necessary, thus postponing the download to later. 
# Default is 50. The number does not say anything about the KB used of the link, 
# since this depends upon many factors.
concurrent.download.limit = 50
 

# --- TFTP ---

# Decide the port to run the TFTP server. Default is 1069. (Default IANA standard is 69)
tftp.port = 69

# --- Telnet ---
# Specify the maximum number of telnet clients allowed. If too many are 
# allowed, it may cause problems for both the server (performance-wise) 
# and the connection to your server 
telnet.max-clients = 10

# Specify the interval in minutes between each time a job/group is 
# scanned for changes in the group (units added or removed). If set too
# low it may cause higher load on server. This rescan will only 
# happen if the process is idle (no telnet-session active)
# Default is 60 minutes.  
telnet.rescan = 60 

# --- Database --- 

# xAPS database connection
db.xaps.url = xaps/xaps@jdbc:mysql://localhost:3306/xaps?useSSL=false
# Max connections. Default is 10. 
db.xaps.maxconn = 40

# Syslog database connection
# Default is to place syslog on the same database as xaps. However, you may
# specify a database placed elsewhere, to relieve the xaps database of excessive
# load from syslogging.
db.syslog.url = xaps/xaps@jdbc:mysql://localhost:3306/xaps?useSSL=false
db.syslog.maxconn = 40
